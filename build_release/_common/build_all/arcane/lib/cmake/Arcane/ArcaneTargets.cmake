# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS arcane_export_compile_flags arcane_build_compile_flags arcane_full arcane_ios arcane_mono arcane_dotnet_coreclr arcane_mpi arcane_thread arcane_mpithread arcane_utils arcane_impl arcane_mesh arcane_launcher arcane_core arcane_geometry arcane_totalview arcane_hdf5 arcane_std arcane_aleph arcane_aleph_kappa arcane_aleph_hypre arcane_aleph_trilinos arcane_aleph_petsc arcane_driverlib arcane_accelerator_core arcane_cartesianmesh arcane_cea arcane_cea_geometric arcane_cea_tests)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Create imported target arcane_export_compile_flags
add_library(arcane_export_compile_flags INTERFACE IMPORTED)

# Create imported target arcane_build_compile_flags
add_library(arcane_build_compile_flags INTERFACE IMPORTED)

set_target_properties(arcane_build_compile_flags PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "ARCANE_FORCE_HIDE_ITEM_CONNECTIVITY_STRUCTURE"
  INTERFACE_COMPILE_OPTIONS "-pthread;-g;-Wall;-Wdeprecated;-fvisibility-inlines-hidden;-fvisibility=hidden"
  INTERFACE_LINK_LIBRARIES "arccore_build_compile_flags"
  INTERFACE_LINK_OPTIONS "-pthread"
)

# Create imported target arcane_full
add_library(arcane_full INTERFACE IMPORTED)

set_target_properties(arcane_full PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_mpi;arcane_thread;arcane_mpithread;arcane_utils;arcane_impl;arcane_mesh;arcane_launcher;arcane_core;arcane_geometry;arcane_hdf5;arcane_std;arcane_accelerator_core;arcane_cartesianmesh;arcane_cea;arcane_cea_geometric"
  INTERFACE_LINK_OPTIONS "-Wl,--no-as-needed"
)

# Create imported target arcane_ios
add_library(arcane_ios SHARED IMPORTED)

set_target_properties(arcane_ios PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_core"
)

# Create imported target arcane_mono
add_library(arcane_mono SHARED IMPORTED)

# Create imported target arcane_dotnet_coreclr
add_library(arcane_dotnet_coreclr SHARED IMPORTED)

# Create imported target arcane_mpi
add_library(arcane_mpi SHARED IMPORTED)

set_target_properties(arcane_mpi PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_impl;arccore_message_passing_mpi"
)

# Create imported target arcane_thread
add_library(arcane_thread SHARED IMPORTED)

set_target_properties(arcane_thread PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_impl;arcane_core;arcane_utils"
)

# Create imported target arcane_mpithread
add_library(arcane_mpithread SHARED IMPORTED)

set_target_properties(arcane_mpithread PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_mpi;arcane_thread;arcane_core;arcane_utils"
)

# Create imported target arcane_utils
add_library(arcane_utils SHARED IMPORTED)

set_target_properties(arcane_utils PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/build_release;/work/zhaoy/Bureau/framework/arcane/src;/work/zhaoy/Bureau/framework/build_release/compatibility/include"
  INTERFACE_LINK_LIBRARIES "arcane_build_compile_flags;arcane_export_compile_flags;arccore_trace;arccore_concurrency;arccore_collections;arccore_base;arcconpkg_Glib"
)

# Create imported target arcane_impl
add_library(arcane_impl SHARED IMPORTED)

set_target_properties(arcane_impl PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/build_release/arcane/impl"
  INTERFACE_LINK_LIBRARIES "arcane_core;dl"
)

# Create imported target arcane_mesh
add_library(arcane_mesh SHARED IMPORTED)

set_target_properties(arcane_mesh PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/build_release/arcane/mesh"
  INTERFACE_LINK_LIBRARIES "arcane_core"
)

# Create imported target arcane_launcher
add_library(arcane_launcher SHARED IMPORTED)

set_target_properties(arcane_launcher PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_impl;arcane_core"
)

# Create imported target arcane_core
add_library(arcane_core SHARED IMPORTED)

set_target_properties(arcane_core PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_accelerator_core;arcane_utils;arccore_message_passing;arccore_serialize"
)

# Create imported target arcane_geometry
add_library(arcane_geometry SHARED IMPORTED)

set_target_properties(arcane_geometry PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/build_release/arcane/geometry/euclidian"
  INTERFACE_LINK_LIBRARIES "arcane_core"
)

# Create imported target arcane_totalview
add_library(arcane_totalview SHARED IMPORTED)

set_target_properties(arcane_totalview PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_core"
)

# Create imported target arcane_hdf5
add_library(arcane_hdf5 SHARED IMPORTED)

set_target_properties(arcane_hdf5 PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/build_release/arcane/hdf5"
  INTERFACE_LINK_LIBRARIES "arcane_mesh;arcane_impl;arcane_core;arcane_utils;hdf5::hdf5;arcconpkg_MPI"
)

# Create imported target arcane_std
add_library(arcane_std SHARED IMPORTED)

set_target_properties(arcane_std PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/build_release/arcane/std"
  INTERFACE_LINK_LIBRARIES "\$<TARGET_NAME_IF_EXISTS:Arccore::arccore_message_passing_mpi>;\$<TARGET_NAME_IF_EXISTS:Arcane::arcane_hdf5>;arcane_mesh;arcane_impl;arcane_core;arcane_utils;hdf5::hdf5;arcconpkg_MPI"
)

# Create imported target arcane_aleph
add_library(arcane_aleph SHARED IMPORTED)

set_target_properties(arcane_aleph PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_core"
)

# Create imported target arcane_aleph_kappa
add_library(arcane_aleph_kappa SHARED IMPORTED)

set_target_properties(arcane_aleph_kappa PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_mesh;arcane_impl;arcane_core;arcane_utils"
)

# Create imported target arcane_aleph_hypre
add_library(arcane_aleph_hypre SHARED IMPORTED)

set_target_properties(arcane_aleph_hypre PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_mesh;arcane_impl;arcane_core;arcane_utils"
)

# Create imported target arcane_aleph_trilinos
add_library(arcane_aleph_trilinos SHARED IMPORTED)

set_target_properties(arcane_aleph_trilinos PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_core"
)

# Create imported target arcane_aleph_petsc
add_library(arcane_aleph_petsc SHARED IMPORTED)

set_target_properties(arcane_aleph_petsc PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_core"
)

# Create imported target arcane_driverlib
add_library(arcane_driverlib SHARED IMPORTED)

set_target_properties(arcane_driverlib PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_std;arcane_core"
)

# Create imported target arcane_accelerator_core
add_library(arcane_accelerator_core SHARED IMPORTED)

set_target_properties(arcane_accelerator_core PROPERTIES
  INTERFACE_LINK_LIBRARIES "arcane_utils"
)

# Create imported target arcane_cartesianmesh
add_library(arcane_cartesianmesh SHARED IMPORTED)

set_target_properties(arcane_cartesianmesh PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/build_release"
  INTERFACE_LINK_LIBRARIES "arcane_core"
)

# Create imported target arcane_cea
add_library(arcane_cea SHARED IMPORTED)

set_target_properties(arcane_cea PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/build_release/arcane/cea;/work/zhaoy/Bureau/framework/build_release/cea/src;/work/zhaoy/Bureau/framework/arcane/ceapart/src"
  INTERFACE_LINK_LIBRARIES "arcane_std;arcane_cartesianmesh;arcane_core"
)

# Create imported target arcane_cea_geometric
add_library(arcane_cea_geometric SHARED IMPORTED)

set_target_properties(arcane_cea_geometric PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/arcane/ceapart/src"
  INTERFACE_LINK_LIBRARIES "arcane_core"
)

# Create imported target arcane_cea_tests
add_library(arcane_cea_tests SHARED IMPORTED)

set_target_properties(arcane_cea_tests PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/work/zhaoy/Bureau/framework/build_release/arcane/tests"
  INTERFACE_LINK_LIBRARIES "arcane_cea_geometric;arcane_cea;arcane_mesh;arcane_impl;arcane_core;arcane_utils;arcane_aleph"
)

# Import target "arcane_ios" for configuration "Release"
set_property(TARGET arcane_ios APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_ios PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_ios.so"
  IMPORTED_SONAME_RELEASE "libarcane_ios.so"
  )

# Import target "arcane_mono" for configuration "Release"
set_property(TARGET arcane_mono APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_mono PROPERTIES
  IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE "arcane_utils"
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_mono.so"
  IMPORTED_SONAME_RELEASE "libarcane_mono.so"
  )

# Import target "arcane_dotnet_coreclr" for configuration "Release"
set_property(TARGET arcane_dotnet_coreclr APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_dotnet_coreclr PROPERTIES
  IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE "arcane_core;arcane_utils"
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_dotnet_coreclr.so"
  IMPORTED_SONAME_RELEASE "libarcane_dotnet_coreclr.so"
  )

# Import target "arcane_mpi" for configuration "Release"
set_property(TARGET arcane_mpi APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_mpi PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_mpi.so"
  IMPORTED_SONAME_RELEASE "libarcane_mpi.so"
  )

# Import target "arcane_thread" for configuration "Release"
set_property(TARGET arcane_thread APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_thread PROPERTIES
  IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE "TBB::tbb"
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_thread.so"
  IMPORTED_SONAME_RELEASE "libarcane_thread.so"
  )

# Import target "arcane_mpithread" for configuration "Release"
set_property(TARGET arcane_mpithread APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_mpithread PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_mpithread.so"
  IMPORTED_SONAME_RELEASE "libarcane_mpithread.so"
  )

# Import target "arcane_utils" for configuration "Release"
set_property(TARGET arcane_utils APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_utils PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_utils.so"
  IMPORTED_SONAME_RELEASE "libarcane_utils.so"
  )

# Import target "arcane_impl" for configuration "Release"
set_property(TARGET arcane_impl APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_impl PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_impl.so"
  IMPORTED_SONAME_RELEASE "libarcane_impl.so"
  )

# Import target "arcane_mesh" for configuration "Release"
set_property(TARGET arcane_mesh APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_mesh PROPERTIES
  IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE "Neo"
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_mesh.so"
  IMPORTED_SONAME_RELEASE "libarcane_mesh.so"
  )

# Import target "arcane_launcher" for configuration "Release"
set_property(TARGET arcane_launcher APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_launcher PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_launcher.so"
  IMPORTED_SONAME_RELEASE "libarcane_launcher.so"
  )

# Import target "arcane_core" for configuration "Release"
set_property(TARGET arcane_core APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_core PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_core.so"
  IMPORTED_SONAME_RELEASE "libarcane_core.so"
  )

# Import target "arcane_geometry" for configuration "Release"
set_property(TARGET arcane_geometry APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_geometry PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_geometry.so"
  IMPORTED_SONAME_RELEASE "libarcane_geometry.so"
  )

# Import target "arcane_totalview" for configuration "Release"
set_property(TARGET arcane_totalview APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_totalview PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_totalview.so"
  IMPORTED_SONAME_RELEASE "libarcane_totalview.so"
  )

# Import target "arcane_hdf5" for configuration "Release"
set_property(TARGET arcane_hdf5 APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_hdf5 PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_hdf5.so"
  IMPORTED_SONAME_RELEASE "libarcane_hdf5.so"
  )

# Import target "arcane_std" for configuration "Release"
set_property(TARGET arcane_std APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_std PROPERTIES
  IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE "hiredis::hiredis"
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_std.so"
  IMPORTED_SONAME_RELEASE "libarcane_std.so"
  )

# Import target "arcane_aleph" for configuration "Release"
set_property(TARGET arcane_aleph APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_aleph PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_aleph.so"
  IMPORTED_SONAME_RELEASE "libarcane_aleph.so"
  )

# Import target "arcane_aleph_kappa" for configuration "Release"
set_property(TARGET arcane_aleph_kappa APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_aleph_kappa PROPERTIES
  IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE "arcane_aleph"
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_aleph_kappa.so"
  IMPORTED_SONAME_RELEASE "libarcane_aleph_kappa.so"
  )

# Import target "arcane_aleph_hypre" for configuration "Release"
set_property(TARGET arcane_aleph_hypre APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_aleph_hypre PROPERTIES
  IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE "arcane_aleph"
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_aleph_hypre.so"
  IMPORTED_SONAME_RELEASE "libarcane_aleph_hypre.so"
  )

# Import target "arcane_aleph_trilinos" for configuration "Release"
set_property(TARGET arcane_aleph_trilinos APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_aleph_trilinos PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_aleph_trilinos.so"
  IMPORTED_SONAME_RELEASE "libarcane_aleph_trilinos.so"
  )

# Import target "arcane_aleph_petsc" for configuration "Release"
set_property(TARGET arcane_aleph_petsc APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_aleph_petsc PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_aleph_petsc.so"
  IMPORTED_SONAME_RELEASE "libarcane_aleph_petsc.so"
  )

# Import target "arcane_driverlib" for configuration "Release"
set_property(TARGET arcane_driverlib APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_driverlib PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_driverlib.so"
  IMPORTED_SONAME_RELEASE "libarcane_driverlib.so"
  )

# Import target "arcane_accelerator_core" for configuration "Release"
set_property(TARGET arcane_accelerator_core APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_accelerator_core PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_accelerator_core.so"
  IMPORTED_SONAME_RELEASE "libarcane_accelerator_core.so"
  )

# Import target "arcane_cartesianmesh" for configuration "Release"
set_property(TARGET arcane_cartesianmesh APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_cartesianmesh PROPERTIES
  IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE "arcane_mesh"
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_cartesianmesh.so"
  IMPORTED_SONAME_RELEASE "libarcane_cartesianmesh.so"
  )

# Import target "arcane_cea" for configuration "Release"
set_property(TARGET arcane_cea APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_cea PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_cea.so"
  IMPORTED_SONAME_RELEASE "libarcane_cea.so"
  )

# Import target "arcane_cea_geometric" for configuration "Release"
set_property(TARGET arcane_cea_geometric APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_cea_geometric PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_cea_geometric.so"
  IMPORTED_SONAME_RELEASE "libarcane_cea_geometric.so"
  )

# Import target "arcane_cea_tests" for configuration "Release"
set_property(TARGET arcane_cea_tests APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(arcane_cea_tests PROPERTIES
  IMPORTED_LOCATION_RELEASE "/work/zhaoy/Bureau/framework/build_release/lib/libarcane_cea_tests.so"
  IMPORTED_SONAME_RELEASE "libarcane_cea_tests.so"
  )

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "arccore_build_compile_flags" "arccore_message_passing_mpi" "arccore_trace" "arccore_concurrency" "arccore_collections" "arccore_base" "arccore_message_passing" "arccore_serialize" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
