# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS Arcane::arcane_export_compile_flags Arcane::arcane_build_compile_flags Arcane::arcane_full Arcane::arcane_ios Arcane::arcane_mono Arcane::arcane_dotnet_coreclr Arcane::arcane_mpi Arcane::arcane_thread Arcane::arcane_mpithread Arcane::arcane_utils Arcane::arcane_impl Arcane::arcane_mesh Arcane::arcane_launcher Arcane::arcane_core Arcane::arcane_geometry Arcane::arcane_totalview Arcane::arcane_hdf5 Arcane::arcane_std Arcane::arcane_aleph Arcane::arcane_aleph_kappa Arcane::arcane_aleph_hypre Arcane::arcane_aleph_trilinos Arcane::arcane_aleph_petsc Arcane::arcane_driverlib Arcane::arcane_accelerator_core Arcane::arcane_cartesianmesh Arcane::arcane_cea Arcane::arcane_cea_geometric Arcane::arcane_cea_tests)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target Arcane::arcane_export_compile_flags
add_library(Arcane::arcane_export_compile_flags INTERFACE IMPORTED)

# Create imported target Arcane::arcane_build_compile_flags
add_library(Arcane::arcane_build_compile_flags INTERFACE IMPORTED)

set_target_properties(Arcane::arcane_build_compile_flags PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "ARCANE_FORCE_HIDE_ITEM_CONNECTIVITY_STRUCTURE"
  INTERFACE_COMPILE_OPTIONS "-pthread;-g;-Wall;-Wdeprecated;-fvisibility-inlines-hidden;-fvisibility=hidden"
  INTERFACE_LINK_LIBRARIES "Arccore::arccore_build_compile_flags"
  INTERFACE_LINK_OPTIONS "-pthread"
)

# Create imported target Arcane::arcane_full
add_library(Arcane::arcane_full INTERFACE IMPORTED)

set_target_properties(Arcane::arcane_full PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_mpi;Arcane::arcane_thread;Arcane::arcane_mpithread;Arcane::arcane_utils;Arcane::arcane_impl;Arcane::arcane_mesh;Arcane::arcane_launcher;Arcane::arcane_core;Arcane::arcane_geometry;Arcane::arcane_hdf5;Arcane::arcane_std;Arcane::arcane_accelerator_core;Arcane::arcane_cartesianmesh;Arcane::arcane_cea;Arcane::arcane_cea_geometric"
  INTERFACE_LINK_OPTIONS "-Wl,--no-as-needed"
)

# Create imported target Arcane::arcane_ios
add_library(Arcane::arcane_ios SHARED IMPORTED)

set_target_properties(Arcane::arcane_ios PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core"
)

# Create imported target Arcane::arcane_mono
add_library(Arcane::arcane_mono SHARED IMPORTED)

# Create imported target Arcane::arcane_dotnet_coreclr
add_library(Arcane::arcane_dotnet_coreclr SHARED IMPORTED)

# Create imported target Arcane::arcane_mpi
add_library(Arcane::arcane_mpi SHARED IMPORTED)

set_target_properties(Arcane::arcane_mpi PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_impl;Arccore::arccore_message_passing_mpi"
)

# Create imported target Arcane::arcane_thread
add_library(Arcane::arcane_thread SHARED IMPORTED)

set_target_properties(Arcane::arcane_thread PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_impl;Arcane::arcane_core;Arcane::arcane_utils"
)

# Create imported target Arcane::arcane_mpithread
add_library(Arcane::arcane_mpithread SHARED IMPORTED)

set_target_properties(Arcane::arcane_mpithread PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_mpi;Arcane::arcane_thread;Arcane::arcane_core;Arcane::arcane_utils"
)

# Create imported target Arcane::arcane_utils
add_library(Arcane::arcane_utils SHARED IMPORTED)

set_target_properties(Arcane::arcane_utils PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_export_compile_flags;Arccore::arccore_trace;Arccore::arccore_concurrency;Arccore::arccore_collections;Arccore::arccore_base;arcconpkg_Glib"
)

# Create imported target Arcane::arcane_impl
add_library(Arcane::arcane_impl SHARED IMPORTED)

set_target_properties(Arcane::arcane_impl PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core;dl"
)

# Create imported target Arcane::arcane_mesh
add_library(Arcane::arcane_mesh SHARED IMPORTED)

set_target_properties(Arcane::arcane_mesh PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core"
)

# Create imported target Arcane::arcane_launcher
add_library(Arcane::arcane_launcher SHARED IMPORTED)

set_target_properties(Arcane::arcane_launcher PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_impl;Arcane::arcane_core"
)

# Create imported target Arcane::arcane_core
add_library(Arcane::arcane_core SHARED IMPORTED)

set_target_properties(Arcane::arcane_core PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_accelerator_core;Arcane::arcane_utils;Arccore::arccore_message_passing;Arccore::arccore_serialize"
)

# Create imported target Arcane::arcane_geometry
add_library(Arcane::arcane_geometry SHARED IMPORTED)

set_target_properties(Arcane::arcane_geometry PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core"
)

# Create imported target Arcane::arcane_totalview
add_library(Arcane::arcane_totalview SHARED IMPORTED)

set_target_properties(Arcane::arcane_totalview PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core"
)

# Create imported target Arcane::arcane_hdf5
add_library(Arcane::arcane_hdf5 SHARED IMPORTED)

set_target_properties(Arcane::arcane_hdf5 PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_mesh;Arcane::arcane_impl;Arcane::arcane_core;Arcane::arcane_utils;hdf5::hdf5;arcconpkg_MPI"
)

# Create imported target Arcane::arcane_std
add_library(Arcane::arcane_std SHARED IMPORTED)

set_target_properties(Arcane::arcane_std PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<TARGET_NAME_IF_EXISTS:Arccore::arccore_message_passing_mpi>;\$<TARGET_NAME_IF_EXISTS:Arcane::arcane_hdf5>;Arcane::arcane_mesh;Arcane::arcane_impl;Arcane::arcane_core;Arcane::arcane_utils;hdf5::hdf5;arcconpkg_MPI"
)

# Create imported target Arcane::arcane_aleph
add_library(Arcane::arcane_aleph SHARED IMPORTED)

set_target_properties(Arcane::arcane_aleph PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core"
)

# Create imported target Arcane::arcane_aleph_kappa
add_library(Arcane::arcane_aleph_kappa SHARED IMPORTED)

set_target_properties(Arcane::arcane_aleph_kappa PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_mesh;Arcane::arcane_impl;Arcane::arcane_core;Arcane::arcane_utils"
)

# Create imported target Arcane::arcane_aleph_hypre
add_library(Arcane::arcane_aleph_hypre SHARED IMPORTED)

set_target_properties(Arcane::arcane_aleph_hypre PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_mesh;Arcane::arcane_impl;Arcane::arcane_core;Arcane::arcane_utils"
)

# Create imported target Arcane::arcane_aleph_trilinos
add_library(Arcane::arcane_aleph_trilinos SHARED IMPORTED)

set_target_properties(Arcane::arcane_aleph_trilinos PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core"
)

# Create imported target Arcane::arcane_aleph_petsc
add_library(Arcane::arcane_aleph_petsc SHARED IMPORTED)

set_target_properties(Arcane::arcane_aleph_petsc PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core"
)

# Create imported target Arcane::arcane_driverlib
add_library(Arcane::arcane_driverlib SHARED IMPORTED)

set_target_properties(Arcane::arcane_driverlib PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_std;Arcane::arcane_core"
)

# Create imported target Arcane::arcane_accelerator_core
add_library(Arcane::arcane_accelerator_core SHARED IMPORTED)

set_target_properties(Arcane::arcane_accelerator_core PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_utils"
)

# Create imported target Arcane::arcane_cartesianmesh
add_library(Arcane::arcane_cartesianmesh SHARED IMPORTED)

set_target_properties(Arcane::arcane_cartesianmesh PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core"
)

# Create imported target Arcane::arcane_cea
add_library(Arcane::arcane_cea SHARED IMPORTED)

set_target_properties(Arcane::arcane_cea PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_std;Arcane::arcane_cartesianmesh;Arcane::arcane_core"
)

# Create imported target Arcane::arcane_cea_geometric
add_library(Arcane::arcane_cea_geometric SHARED IMPORTED)

set_target_properties(Arcane::arcane_cea_geometric PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_core"
)

# Create imported target Arcane::arcane_cea_tests
add_library(Arcane::arcane_cea_tests SHARED IMPORTED)

set_target_properties(Arcane::arcane_cea_tests PROPERTIES
  INTERFACE_LINK_LIBRARIES "Arcane::arcane_cea_geometric;Arcane::arcane_cea;Arcane::arcane_mesh;Arcane::arcane_impl;Arcane::arcane_core;Arcane::arcane_utils;Arcane::arcane_aleph"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/ArcaneTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "Arccore::arccore_build_compile_flags" "Arccore::arccore_message_passing_mpi" "Arccore::arccore_trace" "Arccore::arccore_concurrency" "Arccore::arccore_collections" "Arccore::arccore_base" "Arccore::arccore_message_passing" "Arccore::arccore_serialize" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
